package euler;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
 * 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */ 

public class Problem012 {

	public static void main(String[] args) {
		long startTime = System.nanoTime();
		long triangle = 1;
		long increment = 2;
		while(numberOfDivisors(triangle) <= 500){
			triangle += increment;
			increment++;
		}
		System.out.println(triangle);
		long endTime = System.nanoTime();
		System.out.printf("Total Time: %.6f seconds\n", ((endTime - startTime)/1000000000.0));
	}
	public static int numberOfDivisors(long testTriangle) {
		long limit = (long) Math.sqrt(testTriangle);
		int divisorCount = 1;
		for (int i = 1; i < limit; i++) {
			if(testTriangle % i == 0) {
				if(i *i != testTriangle){
					divisorCount += 2;
				}
				else {
					divisorCount++;
				}
			}
		}
		return divisorCount;
	}

}
